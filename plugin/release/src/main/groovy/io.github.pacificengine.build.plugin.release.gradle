plugins {
    id 'maven-publish'
    id 'signing'
}

ext {
    isReleaseVersion = (!project.property('project.version') ?: project.version).endsWith("SNAPSHOT")
}

def releasePluginProjectName = project.findProperty('project.name') ?: project.name
def releasePluginRootProjectName = project.findProperty('rootProject.name') ?: rootProject.name ?: releasePluginProjectName

//https://docs.gradle.org/current/userguide/signing_plugin.html
//https://docs.gradle.org/current/userguide/publishing_maven.html
tasks.withType(Sign) {
    onlyIf { project.findProperty('project.sign') == 'true' || (isReleaseVersion && project.findProperty('project.sign') != 'false') }
    signing {
        useGpgCmd()
        sign publishing.publications.pluginMaven ?: publishing.publications.rootMaven
    }
}

publishing {
    repositories {
        if((project.findProperty('git.maven.repo.url') != null || System.getenv('GIT_MAVEN_URL') != null)
                && (project.findProperty('git.project.name') != null || project.findProperty('project.name.short') != null)) {
            maven {
                name = "GitHubPackages"
                url = "${project.findProperty('git.maven.repo.url') ?: System.getenv('GIT_MAVEN_URL')}/${project.findProperty('git.project.name') ?: project.findProperty('project.name.short')}"
                credentials {
                    username = project.findProperty("git.maven.repo.user") ?: System.getenv('GIT_USERNAME')
                    password = project.findProperty("git.maven.repo.key") ?: System.getenv('GIT_TOKEN')
                }
            }
        }
        if(project.findProperty('gcp.maven.repo.url') != null || System.getenv('GCP_MAVEN_URL') != null) {
            maven {
                name = "GCPPackages"
                url = project.findProperty('gcp.maven.repo.url') ?: System.getenv('GCP_MAVEN_URL')
                credentials {
                    username = project.findProperty('gcp.maven.repo.user') ?: System.getenv('GCP_MAVEN_USER')
                    password = project.findProperty('gcp.maven.repo.key') ?: System.getenv('GCP_MAVEN_KEY')
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}

afterEvaluate  {
    tasks.withType(PublishToMavenRepository) { task ->
        if (task.publication.name == "pluginMaven") {
            task.publication.groupId = project.findProperty('plugin.artifact.group') ?: project.findProperty('project.archive.group') ?: project.findProperty('project.group') ?: project.group
            task.publication.artifactId = project.findProperty('plugin.artifact.id') ?: project.findProperty('project.archive.name') ?: ((releasePluginRootProjectName == releasePluginProjectName) ? releasePluginProjectName : "${releasePluginRootProjectName}-${releasePluginProjectName}")
            task.publication.version = project.findProperty('project.archive.java.version') ?: project.findProperty('project.archive.version') ?: project.findProperty('project.version') ?: project.version
        } else if (task.publication.name != "rootMaven") {
            logger.lifecycle("Disabling ${task.publication.name}")
            task.enabled = false
            task.group = null
        }
    }
}
